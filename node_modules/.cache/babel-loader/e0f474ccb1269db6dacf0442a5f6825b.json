{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: 0\n  },\n  reducers: {\n    login: (state, action) => {\n      state.users = 1;\n    },\n    ll: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n}; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/smitpatel/clever-Prog/imessage-clone/src/features/counterSlice.js"],"names":["createSlice","userSlice","name","initialState","user","reducers","login","state","action","users","ll","value","incrementByAmount","payload","increment","decrement","counterSlice","actions","incrementAsync","amount","dispatch","setTimeout","selectCount","counter","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AADM,GAFqB;AAKnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxBD,MAAAA,KAAK,CAACE,KAAN,GAAa,CAAb;AACD,KAHO;AAIRC,IAAAA,EAAE,EAAEH,KAAK,IAAI;AACXA,MAAAA,KAAK,CAACI,KAAN,IAAe,CAAf;AACD,KANO;AAORC,IAAAA,iBAAiB,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACI,KAAN,IAAeH,MAAM,CAACK,OAAtB;AACD;AATO;AALyB,CAAD,CAA7B;AAkBP,OAAO,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBH,EAAAA;AAAxB,IAA8CI,YAAY,CAACC,OAAjE,C,CAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGC,MAAM,IAAIC,QAAQ,IAAI;AAClDC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,QAAQ,CAACR,iBAAiB,CAACO,MAAD,CAAlB,CAAR;AACD,GAFS,EAEP,IAFO,CAAV;AAGD,CAJM,C,CAMP;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAAGf,KAAK,IAAIA,KAAK,CAACgB,OAAN,CAAcZ,KAA3C;AAEP,eAAeK,YAAY,CAACQ,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: 0,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.users= 1;\r\n    },\r\n    ll: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}
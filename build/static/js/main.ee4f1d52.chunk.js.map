{"version":3,"sources":["firebase.js","features/userSlice.js","features/chatSlice.js","SidebarChat.js","Sidebar.js","Message.js","Chat.js","Imessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","chatSlice","chatId","chatName","setChat","selectChatName","chat","selectChatId","SidebarChat","id","dispatch","useDispatch","useState","chatInfo","setChatInfo","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","className","Avatar","src","photo","message","timeago","Date","timestamp","toDate","toLocaleString","Sidebar","useSelector","chats","setChats","signOut","placeholder","IconButton","variant","prompt","add","key","Message","forwardRef","ref","contents","email","displayName","uid","Chat","input","setInput","messages","setMessages","value","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","Imessage","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee4f1d52.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nimport firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD_4CJe2g9Is95fhXNZ9oKdU63rNmazEks\",\n  authDomain: \"imessage-clone-89256.firebaseapp.com\",\n  databaseURL: \"https://imessage-clone-89256.firebaseio.com\",\n  projectId: \"imessage-clone-89256\",\n  storageBucket: \"imessage-clone-89256.appspot.com\",\n  messagingSenderId: \"1018585831633\",\n  appId: \"1:1018585831633:web:d4f1e4c21c808ef5bf0df0\",\n  measurementId: \"G-W1C8X9RGDE\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const chatSlice = createSlice({\n  name: \"chat\",\n  initialState: {\n    chatId: null,\n    chatName: null,\n  },\n  reducers: {\n    setChat: (state, action) => {\n      state.chatId = action.payload.chatId;\n      state.chatName = action.payload.chatName;\n    },\n  },\n});\n\nexport const { setChat } = chatSlice.actions;\n\nexport const selectChatName = (state) => state.chat.chatName;\nexport const selectChatId = (state) => state.chat.chatId;\n\nexport default chatSlice.reducer;\n","import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setChat } from \"./features/chatSlice\";\nimport db from \"./firebase\";\nimport \"./SidebarChat.css\";\nimport * as timeago from \"timeago.js\";\n\nfunction SidebarChat({ id, chatName }) {\n  const dispatch = useDispatch();\n  const [chatInfo, setChatInfo] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"chats\")\n      .doc(id)\n      .collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setChatInfo(snapshot.docs.map((doc) => doc.data()))\n      );\n  }, [id]);\n\n  return (\n    <div\n      onClick={() =>\n        dispatch(\n          setChat({\n            chatId: id,\n            chatName: chatName,\n          })\n        )\n      }\n      className=\"sidebarChat\"\n    >\n      <Avatar src={chatInfo[0]?.photo} />\n      <div className=\"sidebarChat__info\">\n        <h3>{chatName}</h3>\n        <p>{chatInfo[0]?.message}</p>\n        <small>\n          {timeago.format(\n            new Date(chatInfo[0]?.timestamp?.toDate()).toLocaleString()\n          )}\n        </small>\n      </div>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import { Avatar, IconButton } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Sidebar.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\nimport SidebarChat from \"./SidebarChat\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/userSlice\";\nimport db, { auth } from \"./firebase\";\n\nfunction Sidebar() {\n  const user = useSelector(selectUser);\n  const [chats, setChats] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"chats\").onSnapshot((snapshot) =>\n      setChats(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      )\n    );\n  }, []);\n\n  const addChat = () => {\n    const chatName = prompt(\"Please enter a chat name\");\n\n    if (chatName) {\n      db.collection(\"chats\").add({\n        chatName: chatName,\n      });\n    }\n  };\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar\n          onClick={() => auth.signOut()}\n          src={user.photo}\n          className=\"sidebar__avatar\"\n        />\n        <div className=\"sidebar__input\">\n          <SearchIcon />\n          <input placeholder=\"Search\" />\n        </div>\n        <IconButton variant=\"outlined\" className=\"sidebar__inputButton\">\n          <RateReviewOutlinedIcon onClick={addChat} />\n        </IconButton>\n      </div>\n      <div className=\"sidebar__chats\">\n        {chats.map(({ id, data: { chatName } }) => (\n          <SidebarChat key={id} id={id} chatName={chatName} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import { Avatar } from \"@material-ui/core\";\nimport React, { forwardRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/userSlice\";\nimport \"./Message.css\";\n\nconst Message = forwardRef(\n  (\n    { id, contents: { timestamp, displayName, email, message, photo, uid } },\n    ref\n  ) => {\n    const user = useSelector(selectUser);\n    return (\n      <div\n        ref={ref}\n        className={`message ${user.email === email && \"message__sender\"}`}\n      >\n        <Avatar className=\"message__photo\" src={photo} />\n        <p>{message}</p>\n        <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\n      </div>\n    );\n  }\n);\n\nexport default Message;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Chat.css\";\nimport MicNoneIcon from \"@material-ui/icons/MicNone\";\nimport { IconButton } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport { useSelector } from \"react-redux\";\nimport { selectChatId, selectChatName } from \"./features/chatSlice\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"./features/userSlice\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Chat() {\n  const user = useSelector(selectUser);\n  const [input, setInput] = useState(\"\");\n  const chatName = useSelector(selectChatName);\n  const chatId = useSelector(selectChatId);\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    if (chatId) {\n      db.collection(\"chats\")\n        .doc(chatId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setMessages(\n            snapshot.docs.map((doc) => ({\n              id: doc.id,\n              data: doc.data(),\n            }))\n          )\n        );\n    }\n  }, [chatId]);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      message: input,\n      uid: user.uid,\n      photo: user.photo,\n      email: user.email,\n      displayName: user.displayName,\n    });\n\n    setInput(\"\");\n  };\n  return (\n    <div className=\"chat\">\n      {/* chat hearder */}\n      <div className=\"chat__header\">\n        <h4>\n          To: <span className=\"chat__name\">{chatName}</span>\n        </h4>\n        <strong>Details</strong>\n      </div>\n      {/* chat message */}\n      <div className=\"chat__messages\">\n        <FlipMove>\n          {messages.map(({ id, data }) => (\n            <Message key={id} contents={data} />\n          ))}\n        </FlipMove>\n      </div>\n\n      {/* chat input */}\n      <div className=\"chat__input\">\n        <form>\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"iMessage\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage}>Send Message</button>\n        </form>\n        <IconButton>\n          <MicNoneIcon className=\"chat__mic\" />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from 'react'\nimport \"./Imessage.css\";\nimport Sidebar from './Sidebar';\nimport Chat from \"./Chat\";\n\nfunction Imessage() {\n    return (\n        <div className=\"imessage\">\n            \n            {/* sidebar */}\n            <Sidebar />\n\n            {/* chat */}\n            <Chat />\n        </div>\n    )\n}\n\nexport default Imessage\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport { auth, provider } from \"./firebase\";\nimport \"./Login.css\";\n\nfunction Login() {\n  const signIn = () => {\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\n  };\n  return (\n    <div className=\"login\">\n      <div className=\"login__logo\">\n        <img\n          src=\"https://upload.wikimedia.org/wikipedia/commons/5/56/IMessage_logo_%28Apple_Inc.%29.png\"\n          alt=\"\"\n        />\n        <h1>iMessage</h1>\n      </div>\n      <Button onClick={signIn}>Sign In</Button>\n    </div>\n  );\n}\n\nexport default Login;\n","import { auth } from \"./firebase\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport { selectUser, login, logout } from \"./features/userSlice\";\r\nimport Imessage from \"./Imessage\";\r\nimport Login from \"./Login\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // user is logged in\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        //user is logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return <div className=\"app\">{user ? <Imessage /> : <Login />}</div>;\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport chatReducer from \"../features/chatSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}